/*
 * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer. 
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution. 
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
WebInspector.Resource=function(e,t){this.identifier=e,this.url=t,this._startTime=-1,this._endTime=-1,this._category=WebInspector.resourceCategories.other,this._pendingContentCallbacks=[],this._responseHeadersSize=0}
// Keep these in sync with WebCore::InspectorResource::Type
,WebInspector.Resource.Type={Document:0,Stylesheet:1,Image:2,Font:3,Script:4,XHR:5,WebSocket:7,Other:8,isTextType:function(e){return e===this.Document||e===this.Stylesheet||e===this.Script||e===this.XHR},toUIString:function(e){switch(e){case this.Document:return WebInspector.UIString("Document");case this.Stylesheet:return WebInspector.UIString("Stylesheet");case this.Image:return WebInspector.UIString("Image");case this.Font:return WebInspector.UIString("Font");case this.Script:return WebInspector.UIString("Script");case this.XHR:return WebInspector.UIString("XHR");case this.WebSocket:return WebInspector.UIString("WebSocket");case this.Other:default:return WebInspector.UIString("Other")}},
// Returns locale-independent string identifier of resource type (primarily for use in extension API).
// The IDs need to be kept in sync with webInspector.resoureces.Types object in ExtensionAPI.js.
toString:function(e){switch(e){case this.Document:return"document";case this.Stylesheet:return"stylesheet";case this.Image:return"image";case this.Font:return"font";case this.Script:return"script";case this.XHR:return"xhr";case this.WebSocket:return"websocket";case this.Other:default:return"other"}}},WebInspector.Resource.prototype={get url(){return this._url},set url(e){if(this._url!==e){this._url=e,delete this._parsedQueryParameters;var t=e.asParsedURL();if(this.domain=t?t.host:"",this.path=t?t.path:"",this.lastPathComponent="",t&&t.path){
// First cut the query params.
var s=t.path,r=s.indexOf("?");-1!==r&&(s=s.substring(0,r));
// Then take last path component.
var i=s.lastIndexOf("/");-1!==i&&(this.lastPathComponent=s.substring(i+1))}this.lastPathComponentLowerCase=this.lastPathComponent.toLowerCase()}},get documentURL(){return this._documentURL},set documentURL(e){this._documentURL=e},get displayName(){return this._displayName||(this._displayName=this.lastPathComponent,this._displayName||(this._displayName=this.displayDomain),!this._displayName&&this.url&&(this._displayName=this.url.trimURL(WebInspector.mainResource?WebInspector.mainResource.domain:"")),"/"===this._displayName&&(this._displayName=this.url)),this._displayName},get displayDomain(){
// WebInspector.Database calls this, so don't access more than this.domain.
return this.domain&&(!WebInspector.mainResource||WebInspector.mainResource&&this.domain!==WebInspector.mainResource.domain)?this.domain:""},get startTime(){return this._startTime||-1},set startTime(e){this._startTime=e},get responseReceivedTime(){return this._responseReceivedTime||-1},set responseReceivedTime(e){this._responseReceivedTime=e},get endTime(){return this._endTime||-1},set endTime(e){this.timing&&this.timing.requestTime?
// Check against accurate responseReceivedTime.
this._endTime=Math.max(e,this.responseReceivedTime):(
// Prefer endTime since it might be from the network stack.
this._endTime=e,this._responseReceivedTime>e&&(this._responseReceivedTime=e))},get duration(){return-1===this._endTime||-1===this._startTime?-1:this._endTime-this._startTime},get latency(){return-1===this._responseReceivedTime||-1===this._startTime?-1:this._responseReceivedTime-this._startTime},get receiveDuration(){return-1===this._endTime||-1===this._responseReceivedTime?-1:this._endTime-this._responseReceivedTime},get resourceSize(){return this._resourceSize||0},set resourceSize(e){this._resourceSize=e},get transferSize(){if(this.cached)return 0;if(304===this.statusCode)// Not modified
return this._responseHeadersSize;
// FIXME: We prefer using Content-Length over resourceSize as
// resourceSize may differ from actual transfer size if platform's
// network stack performed decoding (e.g. gzip decompression).
// The Content-Length, though, is expected to come from raw
// response headers and will reflect actual transfer length.
// This won't work for chunked content encoding, so fall back to
// resourceSize when we don't have Content-Length. This still won't
// work for chunks with non-trivial encodings. We need a way to
// get actaul transfer size from the network stack.
var e=Number(this.responseHeaders["Content-Length"]||this.resourceSize);return this._responseHeadersSize+e},get expectedContentLength(){return this._expectedContentLength||0},set expectedContentLength(e){this._expectedContentLength=e},get finished(){return this._finished},set finished(e){this._finished!==e&&(this._finished=e)&&(this._checkWarnings(),this.dispatchEventToListeners("finished"),this._pendingContentCallbacks.length&&this._innerRequestContent())},get failed(){return this._failed},set failed(e){this._failed=e},get category(){return this._category},set category(e){this._category=e},get cached(){return this._cached},set cached(e){(this._cached=e)&&delete this._timing},get timing(){return this._timing},set timing(e){e&&!this._cached&&(
// Take startTime and responseReceivedTime from timing data for better accuracy.
// Timing's requestTime is a baseline in seconds, rest of the numbers there are ticks in millis.
this._startTime=e.requestTime,this._responseReceivedTime=e.requestTime+e.receiveHeadersEnd/1e3,this._timing=e,this.dispatchEventToListeners("timing changed"))},get mimeType(){return this._mimeType},set mimeType(e){this._mimeType=e},get type(){return this._type},set type(e){if(this._type!==e)switch(this._type=e){case WebInspector.Resource.Type.Document:this.category=WebInspector.resourceCategories.documents;break;case WebInspector.Resource.Type.Stylesheet:this.category=WebInspector.resourceCategories.stylesheets;break;case WebInspector.Resource.Type.Script:this.category=WebInspector.resourceCategories.scripts;break;case WebInspector.Resource.Type.Image:this.category=WebInspector.resourceCategories.images;break;case WebInspector.Resource.Type.Font:this.category=WebInspector.resourceCategories.fonts;break;case WebInspector.Resource.Type.XHR:this.category=WebInspector.resourceCategories.xhr;break;case WebInspector.Resource.Type.WebSocket:this.category=WebInspector.resourceCategories.websockets;break;case WebInspector.Resource.Type.Other:default:this.category=WebInspector.resourceCategories.other}},get requestHeaders(){return this._requestHeaders||{}},set requestHeaders(e){this._requestHeaders=e,delete this._sortedRequestHeaders,delete this._requestCookies,this.dispatchEventToListeners("requestHeaders changed")},get sortedRequestHeaders(){if(void 0!==this._sortedRequestHeaders)return this._sortedRequestHeaders;for(var e in this._sortedRequestHeaders=[],this.requestHeaders)this._sortedRequestHeaders.push({header:e,value:this.requestHeaders[e]});return this._sortedRequestHeaders.sort(function(e,t){return e.header.localeCompare(t.header)}),this._sortedRequestHeaders},requestHeaderValue:function(e){return this._headerValue(this.requestHeaders,e)},get requestCookies(){return this._requestCookies||(this._requestCookies=WebInspector.CookieParser.parseCookie(this.requestHeaderValue("Cookie"))),this._requestCookies},get requestFormData(){return this._requestFormData},set requestFormData(e){this._requestFormData=e,delete this._parsedFormParameters},get responseHeaders(){return this._responseHeaders||{}},set responseHeaders(e){this._responseHeaders=e,
// FIXME: we should take actual headers size from network stack, when possible.
this._responseHeadersSize=this._headersSize(e),delete this._sortedResponseHeaders,delete this._responseCookies,this.dispatchEventToListeners("responseHeaders changed")},get sortedResponseHeaders(){if(void 0!==this._sortedResponseHeaders)return this._sortedResponseHeaders;for(var e in this._sortedResponseHeaders=[],this.responseHeaders)this._sortedResponseHeaders.push({header:e,value:this.responseHeaders[e]});return this._sortedResponseHeaders.sort(function(e,t){return e.header.localeCompare(t.header)}),this._sortedResponseHeaders},responseHeaderValue:function(e){return this._headerValue(this.responseHeaders,e)},get responseCookies(){return this._responseCookies||(this._responseCookies=WebInspector.CookieParser.parseSetCookie(this.responseHeaderValue("Set-Cookie"))),this._responseCookies},get queryParameters(){if(this._parsedQueryParameters)return this._parsedQueryParameters;var e=this.url.split("?",2)[1];return e?(this._parsedQueryParameters=this._parseParameters(e),this._parsedQueryParameters):void 0},get formParameters(){if(this._parsedFormParameters)return this._parsedFormParameters;if(this.requestFormData){var e=this.requestHeaderValue("Content-Type");if(e&&e.match(/^application\/x-www-form-urlencoded\s*(;.*)?$/i))return this._parsedFormParameters=this._parseParameters(this.requestFormData),this._parsedFormParameters}},_parseParameters:function(e){return e.split("&").map(function(e){var t={},s=e.split("=",2);return t.name=s[0],1===s.length?t.value="":t.value=s[1],t})},_headerValue:function(e,t){for(var s in t=t.toLowerCase(),e)if(s.toLowerCase()===t)return e[s]},_headersSize:function(e){var t=0;for(var s in e)t+=s.length+e[s].length+3;// _typical_ overhead per herader is ": ".length + "\n".length.
return t},get errors(){return this._errors||0},set errors(e){this._errors=e,this.dispatchEventToListeners("errors-warnings-updated")},get warnings(){return this._warnings||0},set warnings(e){this._warnings=e,this.dispatchEventToListeners("errors-warnings-updated")},clearErrorsAndWarnings:function(){this._warnings=0,this._errors=0,this.dispatchEventToListeners("errors-warnings-updated")},_mimeTypeIsConsistentWithType:function(){
// If status is an error, content is likely to be of an inconsistent type,
// as it's going to be an error message. We do not want to emit a warning
// for this, though, as this will already be reported as resource loading failure.
return 400<=this.statusCode||(void 0===this.type||this.type===WebInspector.Resource.Type.Other||this.type===WebInspector.Resource.Type.XHR||this.type===WebInspector.Resource.Type.WebSocket||(!this.mimeType||// Might be not known for cached resources with null responses.
this.mimeType in WebInspector.MIMETypes&&this.type in WebInspector.MIMETypes[this.mimeType]))},_checkWarnings:function(){for(var e in WebInspector.Warnings)this._checkWarning(WebInspector.Warnings[e])},_checkWarning:function(e){var t;switch(e.id){case WebInspector.Warnings.IncorrectMIMEType.id:this._mimeTypeIsConsistentWithType()||(t=new WebInspector.ConsoleMessage(WebInspector.ConsoleMessage.MessageSource.Other,WebInspector.ConsoleMessage.MessageType.Log,WebInspector.ConsoleMessage.MessageLevel.Warning,-1,this.url,1,String.sprintf(WebInspector.Warnings.IncorrectMIMEType.message,WebInspector.Resource.Type.toUIString(this.type),this.mimeType),null,null))}t&&WebInspector.console.addMessage(t)},get content(){return this._content},get contentTimestamp(){return this._contentTimestamp},setInitialContent:function(e){this._content=e},isLocallyModified:function(){return!!this._baseRevision},setContent:function(e,t){var s=new WebInspector.Resource(null,this.url);if(s.type=this.type,s.loader=this.loader,s.timestamp=this.timestamp,s._content=this._content,s._actualResource=this,s._fireOnRevert=t,this.finished)s.finished=!0;else{this.addEventListener("finished",function e(){this.removeEventListener("finished",e),s.finished=!0}.bind(this))}this._baseRevision?s._baseRevision=this._baseRevision:this._baseRevision=s;var r={revision:s};this._content=e,this.timestamp=new Date,this.dispatchEventToListeners("content-changed",r)},revertToThis:function(){this._actualResource&&this._fireOnRevert&&this.requestContent(function(e){e&&this._fireOnRevert(e)}.bind(this))},get baseRevision(){return this._baseRevision},requestContent:function(e){
// We do not support content retrieval for WebSockets at the moment.
// Since WebSockets are potentially long-living, fail requests immediately
// to prevent caller blocking until resource is marked as finished.
this.type!==WebInspector.Resource.Type.WebSocket?void 0===this._content?(this._pendingContentCallbacks.push(e),this.finished&&this._innerRequestContent()):e(this.content,this._contentEncoded):e(null,null)},populateImageSource:function(e){Preferences.useDataURLForResourceImageIcons?this.requestContent(function(){e.src=this._contentURL()}.bind(this)):e.src=this.url},_contentURL:function(){
// If resource content is not available or won't fit a data URL, fall back to using original URL.
return null==this._content||1048576<this._content.length?this.url:"data:"+this.mimeType+(this._contentEncoded?";base64,":",")+this._content},_innerRequestContent:function(){this._contentRequested||(this._contentRequested=!0,this._contentEncoded=!WebInspector.Resource.Type.isTextType(this.type),WebInspector.networkManager.requestContent(this,this._contentEncoded,function(e){this._content=e;for(var t=this._pendingContentCallbacks.slice(),s=0;s<t.length;++s)t[s](this._content,this._contentEncoded);this._pendingContentCallbacks.length=0,delete this._contentRequested}.bind(this)))}},WebInspector.Resource.prototype.__proto__=WebInspector.Object.prototype;